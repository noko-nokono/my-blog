---
description: 
globs: 
alwaysApply: false
---
# コードレビューガイドライン

## Cursorでのレビュー実行方法
チャットで以下のコマンドを入力することで、mainブランチとの差分に対するレビューを実行できます：

```
/review [ファイルパス（オプション）]
```

例：
- 全ての変更をレビュー: `/review`
- 特定のファイルをレビュー: `/review src/components/Header.tsx`

このコマンドは、Cursorのチャット機能を使用して以下の処理を自動的に行います：
1. 変更内容の解析
2. レビューガイドラインに基づくコードチェック
3. レビュー結果とフィードバックの提供

## レビュー対象
- 以下の変更内容をレビュー
  - 新規追加ファイル
  - 修正されたファイル
  - 削除されたファイル
- 関連するテストコードの確認

## 基本チェック項目

### 1. アーキテクチャ
- [ ] 適切なディレクトリに配置されているか
- [ ] コンポーネントの分割は適切か
- [ ] 責任範囲は明確か

### 2. コーディング規約
- [ ] 命名規則は守られているか
  - コンポーネント: パスカルケース
  - 関数・変数: キャメルケース
  - 定数: 大文字スネークケース
- [ ] TypeScriptの型定義は適切か
- [ ] ESLint/Prettierのルールに従っているか

### 3. 実装品質
- [ ] パフォーマンスへの影響はないか
- [ ] 不要な複雑性はないか
- [ ] セキュリティ上の問題はないか
- [ ] UIのアクセシビリティは考慮されているか

## レビューコメント
- 具体的な改善提案を行う
- 優先度を明確にする（Critical/Major/Minor）
- 必要に応じてコードの意図を確認する

## 承認条件
- Criticalな指摘が解決されている
- コーディング規約に準拠している
- 動作確認が完了している

## レビュー結果の形式
レビュー結果は以下の形式で出力されます：

```markdown
# レビュー結果

## 変更概要
- 新規ファイル: [数]
- 修正ファイル: [数]
- 削除ファイル: [数]

## ファイルごとのレビュー
### [ファイル名]
#### 良い点 ✨
- [良い実装の指摘]

#### 改善点 🔧
- [Priority: Critical/Major/Minor] [改善が必要な点]

## 全体的なフィードバック
- [全体的なコメント]

## 承認ステータス
- [ ] 承認
- [ ] 条件付き承認
- [ ] 要修正
```

## 注意事項
- レビューはCursorのチャット機能を使用して自動的に実行されます
- Gitコマンドの実行は不要です
- レビュー結果は即座に表示されます
- 必要に応じて特定のファイルのみをレビュー対象にできます
